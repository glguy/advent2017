{-# Language BangPatterns, NumDecimals #-}
{-|
Module      : Main
Description : Day 17 solution
Copyright   : (c) Eric Mertens, 2017
License     : ISC
Maintainer  : emertens@gmail.com

-}
module Main where

import           Advent        (getInput)
import           Data.List     (elemIndices, foldl')
import           Data.Sequence (Seq)
import qualified Data.Sequence as Seq

-- | Print the solutions to the puzzle. Input file can be overridden
-- via command-line arguments.
main :: IO ()
main =
  do input <- readIO =<< getInput 17
     print (elemAfter 2017 (makeSequence input 2017))
     print (part2 input)

-- | Compute the element that immediately follows the needle
-- in the haystack. This assumes a circular interpretation for
-- the list, so the first element is considered to follow the last.
elemAfter ::
  Int     {- ^ needle            -} ->
  Seq Int {- ^ haystack          -} ->
  Int     {- ^ following element -}
elemAfter x xs = Seq.index xs ( (i+1) `rem` Seq.length xs )
  where
    Just i = Seq.elemIndexL x xs

-- | Compute the buffer generated by inserting elements up to a given
-- element using a particular jump size.
--
-- >>> makeSequence 3 9
-- fromList [0,9,5,7,2,4,3,8,6,1]
makeSequence ::
  Int {- ^ jump size    -} ->
  Int {- ^ last element -} ->
  Seq Int
makeSequence jump sz
  = foldl' (\xs (x,i) -> Seq.insertAt i x xs) Seq.empty
  $ zip [0..sz]
  $ cursors jump

-- | The infinite list of cursors generated from a particular jump parameter.
--
-- >>> take 10 (cursors 3)
-- [0,1,1,2,2,1,5,2,6,1]
cursors :: Int -> [Int]
cursors jump = scanl nextCursor 0 [1..]
  where
    nextCursor cursor sz = (cursor+jump)`rem`sz + 1
{-# Inline cursors #-} -- helps list fusion!

-- | Special case for when we only need to know what number is going
-- to follow the zero. Because the 0 is always going to be at the zero
-- index, whatever the last element to be written to the 1 index must
-- be the element that directly follows the zero.
part2 :: Int -> Int
part2 jump = last (elemIndices 1 (take 5e7 (cursors jump)))
